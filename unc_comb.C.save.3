#include <vector>
#include <iostream>
#include <fstream>
#include <sstream>

void MyMessage(const char * msg, double num, bool show)
{
    if (show) cout << msg << num << endl;
}

void unc_comb(const char *inputFileList) 
{
    
  void MyMessage(const char * msg, double num, bool show);
  
  //adapted from FillChain, ExRootAnalysis
  ifstream infile(inputFileList);
  string buffer;
  stringstream str_i;
  TFile*fitres;
  TF1 *fFrix;
  TGraphErrors*gr;
  Int_t nobs=7,nmoms=4;
  Double_t temp[2];

  std::vector< std::vector<double> > parcomb; // will contain alpha and beta combined
  std::vector< std::vector<double> > parerrcomb; // will contain their error - associated with this particular variation -
  
   //Grow rows by m
    parcomb.resize(nobs*nmoms);
    parerrcomb.resize(nobs*nmoms);
    for (int metaobs=0; metaobs<nobs*nmoms; metaobs++){
    	parcomb[metaobs].resize(2);
     	parerrcomb[metaobs].resize(2);
	for (int i=0; i<2; i++)  {
      		parcomb[metaobs][i]=0;
      		parerrcomb[metaobs][i]=0;
	}
  }
  
  if(!infile.is_open())
  {
    cerr << "** ERROR: Can't open '" << inputFileList << "' for input" << endl;
    return;
  }
   
  Int_t n_members=0;
  while(1)
  {
    infile >> buffer;
    if(!infile.good()) break;
    n_members++;
    fitres=new TFile(buffer.c_str(),"READ"); // new file means new member in the combination
                                             // for each member get parameters of each observable and add to the total
    cout << "Opening file " << buffer.c_str() << endl;
    for (metaobs=0; metaobs<nobs*nmoms; metaobs++){
        str_i.str("");
        str_i<<"gr"<<metaobs/nmoms<<"_"<<metaobs%nmoms+1;
        gr=(TGraphErrors*) fitres->Get(str_i.str().c_str()));
        cout <<" Opening graph: " << str_i.str().c_str();

        str_i.str("");
        str_i<< "fFrix"<<metaobs%nmoms +1;
	cout << ", retrieving function "<< str_i.str() << endl ;
        fFrix =   (TF1*)   ( gr->GetFunction( str_i.str().c_str() ) );
        fFrix->GetParameters(temp);
        for (int i=0; i<2; i++) {
            parcomb[metaobs][i]+=temp[i];
            parerrcomb[metaobs][i]+=temp[i]*temp[i];
        }
    }
    delete fitres;
  }// end of reading input files
 infile.close();
 cout << "Read "<<n_members <<" files."<< endl;

 for (int i=0; i<2; i++) for (metaobs=0; metaobs<nobs*nmoms; metaobs++) {
      parcomb[metaobs][i]=n_members;
      parerrcomb[metaobs][i]/=n_members;
      parerrcomb[metaobs][i]-=parcomb[metaobs][i]*parcomb[metaobs][i]; // variance= <x^2>-<x>^2
      if (parerrcomb[metaobs][i]>0) parerrcomb[metaobs][i]=TMath::Sqrt(parerrcomb[metaobs][i]);
      else cout << "Error in variance computation, please check your algorithm."<< endl;
  } 
   
  ofstream outfile("combresults.log"); 
  // now print, for convenience, Delta( alpha ) / beta
  outfile << "Delta(alpha) / beta :"<< endl;
  for (metaobs=0; metaobs<nobs*nmoms; metaobs++) cout << << parerrcomb[metaobs][0]/parcomb[metaobs][1]<< endl;
  outfile.close();
}
